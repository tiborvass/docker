#compdef docker
#
# zsh completion for docker (http://docker.com)
#
# version:  0.3.0
# github:   https://github.com/felixr/docker-zsh-completion
#
# contributors:
#   - Felix Riedel
#   - Vincent Bernat
#
# license:
#
# Copyright (c) 2013, Felix Riedel
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the <organization> nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

__docker_get_containers() {
    local kind expl
    declare -a running stopped lines args

    kind=$1
    shift
    [[ $kind = (stopped|all) ]] && args=($args -a)

    lines=(${(f)"$(_call_program commands docker ps ${args})"})

    # Parse header line to find columns
    local i=1 j=1 k header=${lines[1]}
    declare -A begin end
    while (( $j < ${#header} - 1 )) {
        i=$(( $j + ${${header[$j,-1]}[(i)[^ ]]} - 1))
        j=$(( $i + ${${header[$i,-1]}[(i)  ]} - 1))
        k=$(( $j + ${${header[$j,-1]}[(i)[^ ]]} - 2))
        begin[${header[$i,$(($j-1))]}]=$i
        end[${header[$i,$(($j-1))]}]=$k
    }
    lines=(${lines[2,-1]})

    # Container ID
    local line
    local s
    for line in $lines; do
        s="${line[${begin[CONTAINER ID]},${end[CONTAINER ID]}]%% ##}"
        s="$s:${(l:15:: :::)${${line[${begin[CREATED]},${end[CREATED]}]/ ago/}%% ##}}"
        s="$s, ${${${line[$begin[IMAGE],$end[IMAGE]]}/:/\\:}%% ##}"
        if [[ ${line[${begin[STATUS]},${end[STATUS]}]} = Exit* ]]; then
            stopped=($stopped $s)
        else
            running=($running $s)
        fi
    done

    # Names
    local name
    local -a names
    for line in $lines; do
        names=(${(ps:,:)${${line[${begin[NAMES]},-1]}%% *}})
        for name in $names; do
            s="${name}:${(l:15:: :::)${${line[${begin[CREATED]},${end[CREATED]}]/ ago/}%% ##}}"
            s="$s, ${${${line[$begin[IMAGE],$end[IMAGE]]}/:/\\:}%% ##}"
            if [[ ${line[${begin[STATUS]},${end[STATUS]}]} = Exit* ]]; then
                stopped=($stopped $s)
            else
                running=($running $s)
            fi
        done
    done

    [[ $kind = (running|all) ]] && _describe -t containers-running "running containers" running
    [[ $kind = (stopped|all) ]] && _describe -t containers-stopped "stopped containers" stopped
}

__docker_stoppedcontainers() {
    __docker_get_containers stopped "$@"
}

__docker_runningcontainers() {
    __docker_get_containers running "$@"
}

__docker_containers () {
    __docker_get_containers all "$@"
}

__docker_images () {
    local expl
    declare -a images
    images=(${${${${(f)"$(_call_program commands docker images)"}[2,-1]}/ ##/\\:}%% *})
    images=(${${images%\\:<none>}#<none>} ${${${(f)"$(_call_program commands docker images)"}[2,-1]}/(#b)([^ ]##) ##([^ ]##) ##([^ ]##)*/${match[3]}:${(r:15:: :::)match[2]} in ${match[1]}})
    _describe -t docker-images "images" images
}

__docker_tags() {
    local expl
    declare -a tags
    tags=(${${${${${(f)"$(_call_program commands docker images)"}#* }## #}%% *}[2,-1]})
    _describe -t docker-tags "tags" tags
}

__docker_repositories_with_tags() {
    if compset -P '*:'; then
        __docker_tags
    else
        __docker_repositories -qS ":"
    fi
}

__docker_search() {
    # declare -a dockersearch
    local cache_policy
    zstyle -s ":completion:${curcontext}:" cache-policy cache_policy
    if [[ -z "$cache_policy" ]]; then
        zstyle ":completion:${curcontext}:" cache-policy __docker_caching_policy
    fi

    local searchterm cachename
    searchterm="${words[$CURRENT]%/}"
    cachename=_docker-search-$searchterm

    local expl
    local -a result
    if ( [[ ${(P)+cachename} -eq 0 ]] || _cache_invalid ${cachename#_} ) \
        && ! _retrieve_cache ${cachename#_}; then
        _message "Searching for ${searchterm}..."
        result=(${${${(f)"$(_call_program commands docker search $searchterm)"}%% *}[2,-1]})
        _store_cache ${cachename#_} result
    fi
    _wanted dockersearch expl 'available images' compadd -a result
}

__docker_caching_policy()
{
  oldp=( "$1"(Nmh+1) )     # 1 hour
  (( $#oldp ))
}


__docker_repositories () {
    local expl
    declare -a repos
    repos=(${${${(f)"$(_call_program commands docker images)"}%% *}[2,-1]})
    _describe -t docker-repos "repositories" repos "$@"
}

__docker_commands () {
    # local -a  _docker_subcommands
    local cache_policy

    zstyle -s ":completion:${curcontext}:" cache-policy cache_policy
    if [[ -z "$cache_policy" ]]; then
        zstyle ":completion:${curcontext}:" cache-policy __docker_caching_policy
    fi

    if ( [[ ${+_docker_subcommands} -eq 0 ]] || _cache_invalid docker_subcommands) \
        && ! _retrieve_cache docker_subcommands;
    then
        local -a lines
        lines=(${(f)"$(_call_program commands docker 2>&1)"})
        _docker_subcommands=(${${${lines[$((${lines[(i)Commands:]} + 1)),${lines[(I)    *]}]}## #}/ ##/:})
        _docker_subcommands=($_docker_subcommands 'help:Show help for a command')
        _store_cache docker_subcommands _docker_subcommands
    fi
    _describe -t docker-commands "docker command" _docker_subcommands
}

__docker_subcommand () {
    local -a _command_args
    case "$words[1]" in
        (attach)
            _arguments \
                '(- :)--help[Print usage]' \
                '--no-stdin[Do not attach stdin]' \
                '--sig-proxy[Proxy all received signals to the process (non-TTY mode only)]' \
                ':containers:__docker_runningcontainers' && ret=0
            ;;
        (build)
            _arguments \
                '(-c --cpu-share)'{-c,--cpu-share=-}'[CPU shares (relative weight)]:CPU shares: ' \
                '--cgroup-parent=-[Optional parent cgroup for the container]:cgroup parent: ' \
                '--cpu-period=-[Limit the CPU CFS (Completely Fair Scheduler) period]:CPU period: ' \
                '--cpu-quota=-[Limit the CPU CFS (Completely Fair Scheduler) quota]:CPU quota: ' \
                '--cpuset-cpus=-[CPUs in which to allow execution (0-3, 0,1)]:CPUs: ' \
                '--cpuset-mems=-[MEMs in which to allow execution (0-3, 0,1)]:MEMs: ' \
                '(-f --file)'{-f,--file=-}"[Name of the Dockerfile (Default is 'PATH/Dockerfile')]:Dockerfile:_files" \
                '--force-rm[Always remove intermediate containers]' \
                '(- :)--help[Print usage]' \
                '(-m --memory)'{-m,--memory=-}'[Memory limit]:Memory limit: ' \
                '--memory-swap=-[Total memory (memory + swap), '-1' to disable swap]' \
                '--no-cache[Do not use cache when building the image]' \
                '--pull[Always attempt to pull a newer version of the image]' \
                '(-q --quiet)'{-q,--quiet}'[Suppress the verbose output generated by the containers]' \
                '--rm[Remove intermediate containers after a successful build]' \
                '(-t --tag)'{-t,--tag=-}'[Repository name (and optionally a tag) for the image]:repository:__docker_repositories_with_tags' \
                ':path or URL:_directories' && ret=0
            ;;
        (commit)
            _arguments \
                '(-a --author)'{-a,--author=-}'[Author]:author: ' \
                '*'{-c,--change=-}'[Apply Dockerfile instruction to the created image]' \
                '(- :)--help[Print usage]' \
                '(-m --message)'{-m,--message=-}'[Commit message]:message: ' \
                '(-p --pause)'{-p,--pause}'[Pause container during commit]' \
                ':container:__docker_containers' \
                ':repository:__docker_repositories_with_tags' && ret=0
            ;;
        (cp)
            _arguments \
                '(- :)--help[Print usage]' \
                ':container:->container' \
                ':hostpath:_files' && ret=0
            case $state in
                (container)
                    if compset -P '*:'; then
                        _files
                    else
                        __docker_containers -qS ":"
                    fi
                    ;;
            esac
            ;;
        (create)
            _arguments \
                '*'{-a,--attach=-}'[Attach to STDIN, STDOUT or STDERR]:STD:(STDIN STDOUT STDERR)' \
                '*--add-host=-[Add a custom host-to-IP mapping (host:ip)]:host\:ip mapping: ' \
                '--blkio-weight=-[Block IO (relative weight), between 10 and 1000]:Block IO weight: ' \
                '(-c --cpu-shares)'{-c,--cpu-shares=-}'[CPU shares (relative weight)]:CPU shares:(0 10 100 200 500 800 1000)' \
                '*--cap-add=-[Add Linux capabilities]:capability: ' \
                '*--cap-drop=-[Drop Linux capabilities]:capability: ' \
                '--cgroup-parent=-[Optional parent cgroup for the container]:cgroup parent: ' \
                '--cidfile=-[Write the container ID to the file]:CID:_files' \
                '--cpu-period=-[Limit CPU CFS (Completely Fair Scheduler) period]:CPU period: ' \
                '--cpu-quota=-[Limit the CPU CFS quota]:CPU quota: ' \
                '--cpuset-cpus=-[CPUs in which to allow execution (0-3, 0,1)]:CPUs: ' \
                '--cpuset-mems=-[MEMs in which to allow execution (0-3, 0,1)]:MEMs: ' \
                '*--device=-[Add a host device to the container]:device:_files' \
                '*--dns=-[Set custom dns servers]:dns server: ' \
                '*--dns-search=-[Set custom DNS search domains]:dns domains: ' \
                '*'{-e,--env=-}'[Set environment variables]:environment variable: ' \
                '--entrypoint=-[Overwrite the default ENTRYPOINT of the image]:entry point: ' \
                '*--env-file=-[Read in a file of environment variables]:environment file:_files' \
                '*--expose=-[Expose a port or a range of ports]:port or a range of ports: ' \
                '(-h --hostname)'{-h,--hostname=-}'[Container host name]:hostname:_hosts' \
                '(- :)--help[Print usage]' \
                '(-i --interactive)'{-i,--interactive}'[Keep STDIN open even if not attached]' \
                '--ipc=-[IPC namespace to use]:IPC namespace: ' \
                '*'{-l,--label=-}'[Set meta data on a container]:Label: ' \
                '*--label-file=-[Read in a line delimited file of labels]' \
                '*--link=-[Add link to another container]:link:->link' \
                '--log-driver=-[Logging driver for container]:Logging driver: ' \
                '*--log-opt=-[Log driver options]:Log driver options: ' \
                '*--lxc-conf=-[Add custom lxc options]:lxc options: ' \
                '(-m --memory)'{-m,--memory=-}'[Memory limit (in bytes)]:Memory limit: ' \
                '--mac-address=-[Container MAC address (e.g. 92:d0:c6:0a:29:33)]:MAC address: ' \
                "--memory-swap=-[Total memory (memory + swap), '-1' to disable swap]:Total memory: " \
                '--name=-[Assign a name to the container]:name: ' \
                '--net=-[Set the Network mode for the container]:network mode:(bridge none container host)' \
                '--oom-kill-disable[Disable OOM Killer]' \
                '(-P --publish-all)'{-P,--publish-all}'[Publish all exposed ports to random ports]' \
                '*'{-p,--publish=-}"[Publish a container's port(s) to the host]:port:_ports" \
                '--pid=-[PID namespace to use]:PID: ' \
                '--privileged[Give extended privileges to this container]' \
                "--read-only[Mount the container's root filesystem as read only]" \
                '--restart=-[Restart policy]:restart policy:(no on-failure always)' \
                '--rm[Remove intermediate containers when it exits]' \
                '*--security-opt=-[Security options]:security option: ' \
                '(-t --tty)'{-t,--tty}'[Allocate a pseudo-TTY]' \
                '(-u --user)'{-u,--user=-}'[Username or UID]:user:_users' \
                '*--ulimit=-[Ulimit options]:ulimit: ' \
                '--uts=-[UTS namespace to use]:UTS: ' \
                '*'{-v,--volume=-}'[Bind mount a volume]:volume: ' \
                '*--volumes-from=-[Mount volumes from the specified container]:volume: ' \
                '(-w --workdir)'{-w,--workdir=-}'[Working directory inside the container]:directory:_directories' \
                '(-):images:__docker_images' \
                '(-):command: _command_names -e' \
                '*::arguments: _normal' && ret=0

            case $state in
                (link)
                    if compset -P '*:'; then
                        _wanted alias expl 'Alias' compadd -E ""
                    else
                        __docker_runningcontainers -qS ":"
                    fi
                    ;;
            esac

            ;;
        (diff)
            _arguments \
                '(- :)--help[Print usage]' \
                '*:containers:__docker_containers' && ret=0
            ;;
        (events)
            _arguments \
                '*'{-f,--filter=-}'[Filter output based on conditions provided]:filter: ' \
                '(- :)--help[Print usage]' \
                '--since=-[Show all events created since timestamp]:timestamp: ' \
                '--until=-[Stream events until this timestamp]:timestamp: ' && ret=0
            ;;
        (exec)
            local state
            _arguments \
                '(-d --detach)'{-d,--detach}'[Detached mode: run command in the background]' \
                '(- :)--help[Print usage]' \
                '(-i --interactive)'{-i,--interactive}'[Keep STDIN open even if not attached]' \
                '(-t --tty)'{-t,--tty}'[Allocate a pseudo-TTY]' \
                '(-u --user)'{-u,--user=-}'[Username or UID]:User: ' \
                ':containers:__docker_runningcontainers' \
                '*::command:->anycommand' && ret=0

            case $state in
                (anycommand)
                    shift 1 words
                    (( CURRENT-- ))
                    _normal
                    ;;
            esac

            return ret
            ;;
        (export)
            _arguments \
                '(- :)--help[Print usage]' \
                '(-o --output)'{-o,--output=-}'[Write to a file, instead of STDOUT]:file: ' \
                '*:containers:__docker_containers' && ret=0
            ;;
        (history)
            _arguments \
                '(-H --human)'{-H,--human}'[Print sizes and dates in human readable format]' \
                '(- :)--help[Print usage]' \
                '--no-trunc[Do not truncate output]' \
                '(-q --quiet)'{-q,--quiet}'[Only show numeric IDs]' \
                '*:images:__docker_images' && ret=0
            ;;
        (images)
            _arguments \
                '(-a --all)'{-a,--all}'[Show all images (default hides intermediate images)]' \
                '--digests[Show digests]' \
                '*'{-f,--filter=-}'[Filter output based on conditions provided]:filter: ' \
                '(- :)--help[Print usage]' \
                '--no-trunc[Do not truncate output]' \
                '(-q --quiet)'{-q,--quiet}'[Only show numeric IDs]' \
                ':repository:__docker_repositories' && ret=0
            ;;
        (import)
            _arguments \
                '*'{-c,--change=-}'[Apply Dockerfile instruction to the created image]' \
                '(- :)--help[Print usage]' \
                ':URL:(http:// file://)' \
                ':repository:__docker_repositories_with_tags' && ret=0
            ;;
        (info|version)
            _arguments \
                '(- :)--help[Print usage]' && ret=0
            ;;
        (inspect)
            _arguments \
                '(-f --format)'{-f,--format=-}'[Format the output using the given go template]:template: ' \
                '(- :)--help[Print usage]' \
                '*:containers:__docker_containers' && ret=0
            ;;
        (kill)
            _arguments \
                '(- :)--help[Print usage]' \
                '(-s --signal)'{-s,--signal=-}'[Signal to send to the container]:signal:_signals' \
                '*:containers:__docker_runningcontainers' && ret=0
            ;;
        (load)
            _arguments \
                '(- :)--help[Print usage]' \
                '(-i --input)'{-i,--input=-}'[Read from a tar archive file, instead of STDIN]:archive file:_files -g "*.((tar|TAR)(.gz|.GZ|.Z|.bz2|.lzma|.xz|)|(tbz|tgz|txz))(-.)"' && ret=0
            ;;
        (login)
            _arguments \
                '(-e --email)'{-e,--email=-}'[Email]:email: ' \
                '(- :)--help[Print usage]' \
                '(-p --password)'{-p,--password=-}'[Password]:password: ' \
                '(-u --user)'{-u,--user=-}'[Username]:username: ' \
                '1:server:->string' && ret=0
            ;;
        (logout)
            _arguments \
                '(- :)--help[Print usage]' \
                '1:server:->string' && ret=0
            ;;
        (logs)
            _arguments \
                '(-f --follow)'{-f,--follow}'[Follow log output]' \
                '(- :)--help[Print usage]' \
                '--since=-[Show logs since timestamp]:timestamp: ' \
                '(-t --timestamps)'{-t,--timestamps}'[Show timestamps]' \
                '--tail=-[Number of lines to show from the end of the logs]:lines:(1 10 20 50 all)' \
                '*:containers:__docker_containers' && ret=0
            ;;
        (pause|unpause)
            _arguments \
                '(- :)--help[Print usage]' \
                '1:containers:__docker_runningcontainers' && ret=0
            ;;
        (port)
            _arguments \
                '(- :)--help[Print usage]' \
                '1:containers:__docker_runningcontainers' \
                '2:port:_ports' && ret=0
            ;;
        (ps)
            _arguments \
                '(-a --all)'{-a,--all}'[how all containers (default shows just running)]' \
                '--before=-[Show only container created before Id or Name]:containers:__docker_containers' \
                '*'{-f,--filter=-}'[Filter output based on conditions provided]:filter: ' \
                '(- :)--help[Print usage]' \
                '(-l --latest)'{-l,--latest}'[Show the latest created container, include non-running]' \
                '-n[Show n last created containers, include non-running]:n:(1 5 10 25 50)' \
                '--no-trunc[Do not truncate output]' \
                '(-q --quiet)'{-q,--quiet}'[Only show numeric IDs]' \
                '(-s --size)'{-s,--size}'[Display total file sizes]' \
                '--since=-[Show created since Id or Name, include non-running]:containers:__docker_containers' && ret=0
            ;;
        (pull)
            _arguments \
                '(-a --all-tags)'{-a,--all-tags}'[Download all tagged images in the repository]' \
                '(- :)--help[Print usage]' \
                ':name:__docker_search' && ret=0
            ;;
        (push)
            _arguments \
                '(- :)--help[Print usage]' \
                ':images:__docker_images' && ret=0
            ;;
        (rename)
            _arguments \
                '(- :)--help[Print usage]' \
                ':old name:__docker_containers' \
                ':new name: ' && ret=0
            ;;
        (restart|stop)
            _arguments \
                '(- :)--help[Print usage]' \
                '(-t --time)'{-t,--time=-}'[Seconds to wait for stop before killing the container]:seconds to before killing:(1 5 10 30 60)' \
                '*:containers:__docker_runningcontainers' && ret=0
            ;;
        (rm)
            _arguments \
                '(-f --force)'{-f,--force}'[Force the removal of a running container (uses SIGKILL)]' \
                '(- :)--help[Print usage]' \
                '(-l --link)'{-l,--link}'[Remove the specified link and not the underlying container]' \
                '(-v --volumes)'{-v,--volumes}'[Remove the volumes associated to the container]' \
                '*:containers:__docker_stoppedcontainers' && ret=0
            ;;
        (rmi)
            _arguments \
                '(-f --force)'{-f,--force}'[Force removal of the image]' \
                '(- :)--help[Print usage]' \
                '--no-prune[Do not delete untagged parents]' \
                '*:images:__docker_images' && ret=0
            ;;
        (run)
            _arguments \
                '*'{-a,--attach=-}'[Attach to STDIN, STDOUT or STDERR]:STD:(STDIN STDOUT STDERR)' \
                '*--add-host=-[Add a custom host-to-IP mapping (host\:ip)]:host\:ip mapping: ' \
                '--blkio-weight=-[Block IO (relative weight), between 10 and 1000]:Block IO weight: ' \
                '(-c --cpu-shares)'{-c,--cpu-shares=-}'[CPU shares (relative weight)]:CPU shares:(0 10 100 200 500 800 1000)' \
                '*--cap-add=-[Add Linux capabilities]:capability: ' \
                '*--cap-drop=-[Drop Linux capabilities]:capability: ' \
                '--cgroup-parent=-[Optional parent cgroup for the container]:cgroup parent: ' \
                '--cidfile=-[Write the container ID to the file]:CID file:_files' \
                '--cpu-period=-[Limit CPU CFS (Completely Fair Scheduler) period]:CPU period: ' \
                '--cpu-quota=-[Limit the CPU CFS quota]:CPU quota: ' \
                '--cpuset-cpus=-[CPUs in which to allow execution (0-3, 0,1)]:CPUs: ' \
                '--cpuset-mems=-[MEMs in which to allow execution (0-3, 0,1)]:MEMs: ' \
                '(-d --detach)'{-d,--detach}'[Run container in background and print container ID]' \
                '*--device=-[Add a host device to the container]:device:_files' \
                '*--dns=-[Set custom dns servers]:dns server: ' \
                '*--dns-search=-[Set custom DNS search domains]:dns domains: ' \
                '*'{-e,--env=-}'[Set environment variables]:environment variable: ' \
                '--entrypoint=-[Overwrite the default ENTRYPOINT of the image]:entry point: ' \
                '*--env-file=-[Read in a file of environment variables]:environment file:_files' \
                '*--expose=-[Expose a port or a range of ports]:port or a range of ports: ' \
                '(-h --hostname)'{-h,--hostname=-}'[Container host name]:hostname:_hosts' \
                '(- :)--help[Print usage]' \
                '(-i --interactive)'{-i,--interactive}'[Keep STDIN open even if not attached]' \
                '--ipc=-[IPC namespace to use]:IPC: ' \
                '*'{-l,--label=-}'[Set meta data on a container]:Label: ' \
                '*--label-file=-[Read in a line delimited file of labels]' \
                '*--link=-[Add link to another container]:link:->link' \
                '--log-driver=-[Logging driver for container]:Logging driver: ' \
                '*--log-opt=-[Log driver options]:Log driver options: ' \
                '*--lxc-conf=-[Add custom lxc options]:lxc options: ' \
                '(-m --memory)'{-m,--memory=-}'[Memory limit (in bytes)]:Memory limit: ' \
                '--mac-address=-[Container MAC address (e.g. 92:d0:c6:0a:29:33)]:MAC address: ' \
                "--memory-swap=-[Total memory (memory + swap), '-1' to disable swap]:Total memory: " \
                '--name=-[Assign a name to the container]:name: ' \
                '--net=-[Set the Network mode for the container]:network mode:(bridge none container host)' \
                '--oom-kill-disable[Disable OOM Killer]' \
                '(-P --publish-all)'{-P,--publish-all}'[Publish all exposed ports to random ports]' \
                '*'{-p,--publish=-}"[Publish a container's port(s) to the host]:port:_ports" \
                '--pid=-[PID namespace to use]:PID: ' \
                '--privileged[Give extended privileges to this container]' \
                "--read-only[Mount the container's root filesystem as read only]" \
                '--restart=-[Restart policy]:restart policy:(no on-failure always)' \
                '--rm[Remove intermediate containers when it exits]' \
                '*--security-opt=-[Security options]:security option: ' \
                '--sig-proxy[Proxy all received signals to the process (non-TTY mode only)]' \
                '(-t --tty)'{-t,--tty}'[Allocate a pseudo-TTY]' \
                '(-u --user)'{-u,--user=-}'[Username or UID]:user:_users' \
                '*--ulimit=-[Ulimit options]:ulimit: ' \
                '--uts=-[UTS namespace to use]:UTS: ' \
                '*'{-v,--volume=-}'[Bind mount a volume]:volume: ' \
                '*--volumes-from=-[Mount volumes from the specified container]:volume: ' \
                '(-w --workdir)'{-w,--workdir=-}'[Working directory inside the container]:directory:_directories' \
                '(-):images:__docker_images' \
                '(-):command: _command_names -e' \
                '*::arguments: _normal' && ret=0

            case $state in
                (link)
                    if compset -P '*:'; then
                        _wanted alias expl 'Alias' compadd -E ""
                    else
                        __docker_runningcontainers -qS ":"
                    fi
                    ;;
            esac

            ;;
        (save)
            _arguments \
                '(- :)--help[Print usage]' \
                '(-o --output)'{-o,--output=-}'[Write to file]:file: ' \
                '*:images:__docker_images' && ret=0
            ;;
        (search)
            _arguments \
                '--automated[Only show automated builds]' \
                '(- :)--help[Print usage]' \
                '--no-trunc[Do not truncate output]' \
                '(-s --stars)'{-s,--stars=-}'[Only display with at least X stars]:stars:(0 10 100 1000)' \
                '1:term:->string' && ret=0
            ;;
        (start)
            _arguments \
                '(-a --attach)'{-a,--attach}'[Attach STDOUT/STDERR and forward signals]' \
                '(- :)--help[Print usage]' \
                '(-i --interactive)'{-i,--interactive}"[Attach container's STDIN]" \
                '*:containers:__docker_stoppedcontainers' && ret=0
            ;;
        (stats)
            _arguments \
                '(- :)--help[Print usage]' \
                '--no-stream[Disable streaming stats and only pull the first result]' \
                '*:containers:__docker_runningcontainers' && ret=0
            ;;
        (tag)
            _arguments \
                '(-f --force)'{-f,--force}'[force]'\
                '(- :)--help[Print usage]' \
                ':image:__docker_images'\
                ':repository:__docker_repositories_with_tags' && ret=0
            ;;
        (top)
            _arguments \
                '(- :)--help[Print usage]' \
                '1:containers:__docker_runningcontainers' \
                '(-)*:: :->ps-arguments' && ret=0
            case $state in
                (ps-arguments)
                    _ps
                    ;;
            esac

            ;;
        (wait)
            _arguments \
                '(- :)--help[Print usage]' \
                '*:containers:__docker_runningcontainers' && ret=0
            ;;
        (help)
            _arguments ':subcommand:__docker_commands' && ret=0
            ;;
        (*)
            _message 'Unknown sub command'
    esac

}

_docker () {
    # Support for subservices, which allows for `compdef _docker docker-shell=_docker_containers`.
    # Based on /usr/share/zsh/functions/Completion/Unix/_git without support for `ret`.
    if [[ $service != docker ]]; then
        _call_function - _$service
        return
    fi

    local curcontext="$curcontext" state line ret=1
    typeset -A opt_args

    _arguments -C \
        '--api-cors-header=-[Set CORS headers in the remote API]:CORS headers: ' \
        '(-b --bridge)'{-b,--bridge=-}'[Attach containers to a network bridge]:bridge: ' \
        '--bip=-[Specify network bridge IP]' \
        '(-D --debug)'{-D,--debug}'[Enable debug mode]' \
        '(-d --daeamon)'{-d,--daemon}'[Enable daemon mode]' \
        '--default-gateway[Container default gateway IPv4 address]:IPv4 address: ' \
        '--default-gateway-v6[Container default gateway IPv6 address]:IPv6 address: ' \
        '*--dns=-[DNS server to use]:DNS: ' \
        '*--dns-search=-[DNS search domains to use]' \
        '*--default-ulimit=-[Set default ulimit settings for containers]:ulimit: ' \
        '(-e --exec-driver)'{-e,--exec-driver=-}'[Exec driver to use]:driver:(native lxc Windows)' \
        '*--exec-opt=-[Set exec driver options]:exec driver options: ' \
        '--exec-root=-[Root of the Docker execdriver (default: /var/run/docker)]:PATH:_directories' \
        '--fixed-cidr=-[IPv4 subnet for fixed IPs]:IPv4 subnet: ' \
        '--fixed-cidr-v6=-[IPv6 subnet for fixed IPs]:IPv6 subnet: ' \
        '(-G --group)'{-G,--group=-}'[Group for the unix socket (default: docker)]:group:_groups' \
        '(-g --graph)'{-g,--graph=-}'[Root of the Docker runtime (default: /var/lib/docker)]:PATH:_directories' \
        '(-H --host)'{-H,--host=-}'[tcp://host:port to bind/connect to]:socket: ' \
        '(-h --help)'{-h,--help}'[Print usage]' \
        '--icc[Enable inter-container communication]' \
        '*--insecure-registry=-[Enable insecure registry communication]:registry: ' \
        '--ip=-[Default IP when binding container ports (default: 0.0.0.0)]' \
        '--ip-forward=-[Enable net.ipv4.ip_forward]:enable:(true false)' \
        '--ip-masq=-[Enable IP masquerading]:enable:(true false)' \
        '--iptables=-[Enable addition of iptables rules]:enable:(true false)' \
        '--ipv6[Enable IPv6 networking]' \
        '(-l --log-level)'{-l,--log-level=-}'[Set the logging level]:level:(debug info warn error fatal)' \
        '*--label=-[Set key=value labels to the daemon]:label: ' \
        '--log-driver=-[Default driver for container logs (default: json-file)]:driver:(json-file syslog journald gelf none)' \
        '*--log-opt=-[Log driver specific options]:log driver options: ' \
        '--mtu=-[Set the containers network MTU (default: 0)]' \
        '(-p --pidfile)'{-p,--pidfile=-}'[Path to use for daemon PID file (default: /var/run/docker.pid)]:PID file PATH: ' \
        '*--registry-mirror=-[Preferred Docker registry mirror]:registry mirror: ' \
        '(-s --storage-driver)'{-s,--storage-driver=-}'[Storage driver to use]:driver:(aufs devicemapper btrfs zfs overlay)' \
        '--selinux-enabled[Enable selinux support]' \
        '*--storage-opt=-[Set storage driver options]:storage driver options: ' \
        '--tls[Use TLS; implied by --tlsverify]' \
        '--tlscacert=-[Trust certs signed only by this CA (default: ~/.docker/ca.pem)]' \
        '--tlscert=-[Path to TLS certificate file (default: ~/.docker/cert.pem)]' \
        '--tlskey=-[Path to TLS key file (default: ~/.docker/key.pem)]' \
        '--tlsverify[Use TLS and verify the remote]' \
        '--userland-proxy=-[Use userland proxy for loopback traffic]:enable:(true false)' \
        '(-v --version)'{-v,--version}'[Print version information and quit]' \
        '(-): :->command' \
        '(-)*:: :->option-or-argument' && ret=0

    if (( CURRENT == 1 )); then

    fi
    case $state in
        (command)
            __docker_commands && ret=0
            ;;
        (option-or-argument)
            curcontext=${curcontext%:*:*}:docker-$words[1]:
            __docker_subcommand && ret=0
            ;;
    esac

    return ret
}

_docker "$@"

# Local Variables:
# mode: Shell-Script
# sh-indentation: 4
# indent-tabs-mode: nil
# sh-basic-offset: 4
# End:
# vim: ft=zsh sw=4 ts=4 et
